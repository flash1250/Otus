DROP TABLE IF EXISTS public.user_profiles;
DROP TABLE IF EXISTS public.users;
DROP TABLE IF EXISTS account.accounts;
DROP TABLE IF EXISTS ordersproduct.baskets;
DROP TABLE IF EXISTS ordersproduct.order_items;
DROP TABLE IF EXISTS ordersproduct.orders;
DROP TABLE IF EXISTS ordersproduct.products;
DROP TABLE IF EXISTS notification.notifications;
DROP TABLE IF EXISTS payment.payments;
DROP TABLE IF EXISTS warehouse.availableproducts;
DROP TABLE IF EXISTS warehouse.reservedorders;
DROP TABLE IF EXISTS warehouse.reservedorder_items;
DROP TABLE IF EXISTS delivery.availabletimeslots;
DROP TABLE IF EXISTS delivery.reservedtimeslots;

CREATE TABLE IF NOT EXISTS public.users
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    login text COLLATE pg_catalog."default",
    password text COLLATE pg_catalog."default",
    is_logged_in boolean,
	CONSTRAINT "PK_users" PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.users
    OWNER to otuspostgres;

CREATE TABLE IF NOT EXISTS public.user_profiles
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
	user_id bigint NOT NULL,
    first_name text COLLATE pg_catalog."default",
	last_name text COLLATE pg_catalog."default",
	email text COLLATE pg_catalog."default",
	CONSTRAINT "PK_user_profiles" PRIMARY KEY (id),
    CONSTRAINT "FK_user_profiles_users" FOREIGN KEY (user_id)
        REFERENCES public.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION   
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.user_profiles
    OWNER to otuspostgres;		
	

	
CREATE SCHEMA IF NOT EXISTS account
AUTHORIZATION pg_database_owner;

GRANT USAGE ON SCHEMA account TO PUBLIC;

GRANT ALL ON SCHEMA account TO pg_database_owner;


CREATE TABLE IF NOT EXISTS account.accounts
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
	user_id bigint NOT NULL,
	user_name text COLLATE pg_catalog."default",
	amount bigint NOT NULL,	
	CONSTRAINT "PK_accounts" PRIMARY KEY (id)   
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS account.accounts
    OWNER to otuspostgres;	
	

CREATE SCHEMA IF NOT EXISTS ordersproduct
AUTHORIZATION pg_database_owner;

GRANT USAGE ON SCHEMA ordersproduct TO PUBLIC;

GRANT ALL ON SCHEMA ordersproduct TO pg_database_owner;		


CREATE TABLE IF NOT EXISTS ordersproduct.products
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
	name text COLLATE pg_catalog."default",
    cost bigint NOT NULL,	
	CONSTRAINT "PK_products" PRIMARY KEY (id)    
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS ordersproduct.products
    OWNER to otuspostgres;	
	
INSERT INTO ordersproduct.products(name, cost) VALUES ('table', 500);		
INSERT INTO ordersproduct.products(name, cost) VALUES ('chair', 200);
INSERT INTO ordersproduct.products(name, cost) VALUES ('divan', 700);
INSERT INTO ordersproduct.products(name, cost) VALUES ('dresser', 600);


CREATE TABLE IF NOT EXISTS ordersproduct.orders
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
	user_id bigint NOT NULL,
    status bigint NOT NULL,
	corellation_id text COLLATE pg_catalog."default",
	CONSTRAINT "PK_orders" PRIMARY KEY (id)	
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS ordersproduct.orders
    OWNER to otuspostgres;
	
	
CREATE TABLE IF NOT EXISTS ordersproduct.order_items
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
	order_id bigint NOT NULL,		
	product_id bigint NOT NULL,	
	product_name text COLLATE pg_catalog."default",	
	quantity bigint NOT NULL,
	CONSTRAINT "PK_order_items" PRIMARY KEY (id),
	CONSTRAINT "FK_order_items_orders" FOREIGN KEY (order_id)
        REFERENCES ordersproduct.orders (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
	CONSTRAINT "FK_order_items_products" FOREIGN KEY (product_id)
        REFERENCES ordersproduct.products (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION      		
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS ordersproduct.orders
    OWNER to otuspostgres;	
	

CREATE TABLE IF NOT EXISTS ordersproduct.baskets
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
	user_id bigint NOT NULL,	
	product_id bigint NOT NULL,	
	product_name text COLLATE pg_catalog."default",	
	quantity bigint NOT NULL,
	CONSTRAINT "PK_order_basket" PRIMARY KEY (id),
	CONSTRAINT "FK_basket_products" FOREIGN KEY (product_id)
        REFERENCES ordersproduct.products (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION      	
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS ordersproduct.baskets
    OWNER to otuspostgres;		
	

CREATE SCHEMA IF NOT EXISTS notification
AUTHORIZATION pg_database_owner;

GRANT USAGE ON SCHEMA notification TO PUBLIC;

GRANT ALL ON SCHEMA notification TO pg_database_owner;		


CREATE TABLE IF NOT EXISTS notification.notifications
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
	order_id bigint NOT NULL,	
    email_text text COLLATE pg_catalog."default",
	email_status bigint NOT NULL,	
	CONSTRAINT "PK_notifications" PRIMARY KEY (id)    
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS notification.notifications
    OWNER to otuspostgres;	
	
	
CREATE SCHEMA IF NOT EXISTS payment
AUTHORIZATION pg_database_owner;

GRANT USAGE ON SCHEMA payment TO PUBLIC;

GRANT ALL ON SCHEMA payment TO pg_database_owner;		


CREATE TABLE IF NOT EXISTS payment.payments
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
	order_id bigint NOT NULL,
	user_id bigint NOT NULL,
	status bigint NOT NULL,	
	CONSTRAINT "PK_payments" PRIMARY KEY (id)    
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS payment.payments
    OWNER to otuspostgres;		
	
	
CREATE SCHEMA IF NOT EXISTS warehouse
AUTHORIZATION pg_database_owner;

GRANT USAGE ON SCHEMA warehouse TO PUBLIC;

GRANT ALL ON SCHEMA warehouse TO pg_database_owner;		

CREATE TABLE IF NOT EXISTS warehouse.availableproducts
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
	product_id bigint NOT NULL,
	product_name text COLLATE pg_catalog."default",	
	quantity bigint NOT NULL,
	CONSTRAINT "PK_availableproducts" PRIMARY KEY (id)    
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS warehouse.availableproducts
    OWNER to otuspostgres;
	
INSERT INTO warehouse.availableproducts(product_id, product_name, quantity) VALUES (1,'table', 8);		
INSERT INTO warehouse.availableproducts(product_id, product_name, quantity) VALUES (2,'chair', 8);
INSERT INTO warehouse.availableproducts(product_id, product_name, quantity) VALUES (3,'divan', 8);	
	

CREATE TABLE IF NOT EXISTS warehouse.reservedorders
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
	order_id bigint NOT NULL,
	user_id bigint NOT NULL,	
	order_prepared boolean NOT NULL DEFAULT FALSE,		
	CONSTRAINT "PK_reservedorders" PRIMARY KEY (id)    
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS warehouse.reservedorders
    OWNER to otuspostgres;		
	

CREATE TABLE IF NOT EXISTS warehouse.reservedorder_items
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
	reserved_order_id bigint NOT NULL,	
	product_id bigint NOT NULL,	
	product_name text COLLATE pg_catalog."default",
    product_prepared boolean NOT NULL DEFAULT FALSE,
	quantity bigint NOT NULL,	
	CONSTRAINT "PK_reservedorderitems" PRIMARY KEY (id)    
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS warehouse.reservedorder_items
    OWNER to otuspostgres;
	


CREATE SCHEMA IF NOT EXISTS delivery
AUTHORIZATION pg_database_owner;

GRANT USAGE ON SCHEMA delivery TO PUBLIC;

GRANT ALL ON SCHEMA delivery TO pg_database_owner;		

CREATE TABLE IF NOT EXISTS delivery.availabletimeslots
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
	timeslot text COLLATE pg_catalog."default",
	is_available boolean NOT NULL DEFAULT FALSE,		
	CONSTRAINT "PK_availabletimeslots" PRIMARY KEY (id)    
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS delivery.availabletimeslots
    OWNER to otuspostgres;

INSERT INTO delivery.availabletimeslots(timeslot, is_available) VALUES ('00:00-03:00', true);		
INSERT INTO delivery.availabletimeslots(timeslot, is_available) VALUES ('03:00-06:00', true);		
INSERT INTO delivery.availabletimeslots(timeslot, is_available) VALUES ('06:00-09:00', true);		
INSERT INTO delivery.availabletimeslots(timeslot, is_available) VALUES ('09:00-12:00', true);		
INSERT INTO delivery.availabletimeslots(timeslot, is_available) VALUES ('12:00-15:00', true);		
INSERT INTO delivery.availabletimeslots(timeslot, is_available) VALUES ('15:00-18:00', true);		
INSERT INTO delivery.availabletimeslots(timeslot, is_available) VALUES ('18:00-21:00', true);		
INSERT INTO delivery.availabletimeslots(timeslot, is_available) VALUES ('21:00-24:00', true);		


CREATE TABLE IF NOT EXISTS delivery.reservedtimeslots
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
	available_timeslot_id bigint NOT NULL,
	order_id bigint NOT NULL,
	user_id bigint NOT NULL,	
	CONSTRAINT "PK_timeslotsreserved" PRIMARY KEY (id)    
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS delivery.reservedtimeslots
    OWNER to otuspostgres;	
	